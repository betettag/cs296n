// <auto-generated />
using System;
using CommunitySite.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunitySite.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191207205241_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CommunitySite.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int?>("AuthorUserID");

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("Important");

                    b.Property<bool?>("MemberCheck")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<DateTime>("PubDate");

                    b.Property<int?>("TopicID");

                    b.Property<string>("TopicTitle");

                    b.Property<string>("User")
                        .IsRequired();

                    b.HasKey("MessageID");

                    b.HasIndex("AuthorUserID");

                    b.HasIndex("TopicID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CommunitySite.Models.Place", b =>
                {
                    b.Property<int>("PlaceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Img");

                    b.Property<string>("Info");

                    b.Property<string>("Location");

                    b.Property<string>("Map");

                    b.Property<string>("Name");

                    b.HasKey("PlaceID");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("CommunitySite.Models.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("PubDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserID");

                    b.Property<string>("UserName");

                    b.HasKey("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("CommunitySite.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<bool>("Admin");

                    b.Property<string>("Email");

                    b.Property<bool>("Guest");

                    b.Property<string>("Img");

                    b.Property<string>("Info");

                    b.Property<DateTime>("JoinDate");

                    b.Property<string>("Pass")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<string>("ReplyingTo");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CommunitySite.Models.Message", b =>
                {
                    b.HasOne("CommunitySite.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserID");

                    b.HasOne("CommunitySite.Models.Topic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicID");
                });

            modelBuilder.Entity("CommunitySite.Models.Topic", b =>
                {
                    b.HasOne("CommunitySite.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
